{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2025-01-29T04:55:56.581Z",
    "end": "2025-01-29T04:56:29.255Z",
    "duration": 32674,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0f6c3209-a117-4902-8e18-5afece8ba4d6",
      "title": "",
      "fullFile": "cypress\\integration\\examples\\BDD\\homepage.feature",
      "file": "cypress\\integration\\examples\\BDD\\homepage.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2c035a96-5cf7-4b5b-b247-a16ebb855a27",
          "title": "Open Homepage",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Open Homepage And Assert Title",
              "fullTitle": "Open Homepage Open Homepage And Assert Title",
              "timedOut": null,
              "duration": 2514,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a, _b, _c, _d, _e;\n/**\n * This must always be true, otherwise something is off.\n */\n(0, assertions_1.assert)(context.includedPickles[0].id === pickle.id, \"Included pickle stack is unsynchronized\");\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\ntaskTestCaseStarted(context, {\n    id: testCaseStartedId,\n    testCaseId,\n    attempt: attempt++,\n    timestamp: (0, messages_1.createTimestamp)(),\n});\nwindow.testState = {\n    gherkinDocument,\n    pickles,\n    pickle,\n};\nconst onAfterStep = (options) => {\n    var _a, _b, _c;\n    const { testStepId, start, result } = options;\n    const end = (0, messages_1.createTimestamp)();\n    if (result === \"pending\" || result === \"skipped\") {\n        if (result === \"pending\") {\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.PENDING,\n                    duration: (0, messages_1.duration)(start, end),\n                },\n                timestamp: end,\n            });\n        }\n        else {\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.SKIPPED,\n                    duration: (0, messages_1.duration)(start, end),\n                },\n                timestamp: end,\n            });\n        }\n        remainingSteps.shift();\n        for (const skippedStep of remainingSteps) {\n            const hookIdOrPickleStepId = (0, assertions_1.assertAndReturn)((_b = (_a = skippedStep.hook) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : (_c = skippedStep.pickleStep) === null || _c === void 0 ? void 0 : _c.id, \"Expected a step to either be a hook or a pickleStep\");\n            const testStepId = getTestStepId({\n                context,\n                pickleId: pickle.id,\n                hookIdOrPickleStepId,\n            });\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: (0, messages_1.createTimestamp)(),\n            });\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.SKIPPED,\n                    duration: {\n                        seconds: 0,\n                        nanos: 0,\n                    },\n                },\n                timestamp: (0, messages_1.createTimestamp)(),\n            });\n        }\n        for (let i = 0, count = remainingSteps.length; i < count; i++) {\n            remainingSteps.pop();\n        }\n        cy.then(() => this.skip());\n    }\n    else {\n        taskTestStepFinished(context, {\n            testStepId,\n            testCaseStartedId,\n            testStepResult: {\n                status: messages.TestStepResultStatus.PASSED,\n                duration: (0, messages_1.duration)(start, end),\n            },\n            timestamp: end,\n        });\n        remainingSteps.shift();\n    }\n};\nfor (const step of steps) {\n    if (step.hook) {\n        const hook = step.hook;\n        const testStepId = getTestStepId({\n            context,\n            pickleId: pickle.id,\n            hookIdOrPickleStepId: hook.id,\n        });\n        cy.then(() => {\n            delete window.testState.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            internalProperties.currentStepStartedAt = start;\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: start,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const options = {\n                pickle,\n                gherkinDocument,\n                testCaseStartedId,\n            };\n            return (0, cypress_1.runStepWithLogGroup)({\n                fn: dryRun\n                    ? noopFn\n                    : () => registry.runCaseHook(this, hook, options),\n                keyword: hook.keyword,\n                text: createStepDescription(hook),\n            }).then((result) => {\n                return { start, result };\n            });\n        })\n            .then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n    }\n    else if (step.pickleStep) {\n        const pickleStep = step.pickleStep;\n        const testStepId = getTestStepId({\n            context,\n            pickleId: pickle.id,\n            hookIdOrPickleStepId: pickleStep.id,\n        });\n        const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n        const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a = pickleStep.astNodeIds) === null || _a === void 0 ? void 0 : _a[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n        const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable)\n            ? new data_table_1.default(pickleStep.argument.dataTable)\n            : ((_e = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e === void 0 ? void 0 : _e.content)\n                ? pickleStep.argument.docString.content\n                : undefined;\n        cy.then(() => {\n            window.testState.pickleStep = step.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            internalProperties.currentStep = { pickleStep };\n            internalProperties.currentStepStartedAt = start;\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: start,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const beforeStepHooks = registry.resolveBeforeStepHooks(tags);\n            const afterStepHooks = registry.resolveAfterStepHooks(tags);\n            const options = {\n                pickle,\n                pickleStep,\n                gherkinDocument,\n                testCaseStartedId,\n                testStepId,\n            };\n            const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n                return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                    keyword: \"BeforeStep\",\n                    text: createStepDescription(beforeStepHook),\n                    fn: dryRun\n                        ? noopFn\n                        : () => registry.runStepHook(this, beforeStepHook, options),\n                }));\n            }, cy.wrap({}, { log: false }));\n            return beforeHooksChain.then(() => {\n                try {\n                    return (0, cypress_1.runStepWithLogGroup)({\n                        keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n                        argument,\n                        text,\n                        fn: () => registry.runStepDefininition(this, text, dryRun, argument),\n                    }).then((result) => {\n                        return afterStepHooks\n                            .reduce((chain, afterStepHook) => {\n                            return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                                keyword: \"AfterStep\",\n                                text: createStepDescription(afterStepHook),\n                                fn: dryRun\n                                    ? noopFn\n                                    : () => registry.runStepHook(this, afterStepHook, options),\n                            }));\n                        }, cy.wrap({}, { log: false }))\n                            .then(() => {\n                            return { start, result };\n                        });\n                    });\n                }\n                catch (e) {\n                    if (e instanceof registry_1.MissingDefinitionError) {\n                        throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            });\n        })\n            .then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n    }\n}",
              "err": {},
              "uuid": "407b3602-9e67-4697-b750-9c8d622cc307",
              "parentUUID": "2c035a96-5cf7-4b5b-b247-a16ebb855a27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Open Homepage And Assert Logo",
              "fullTitle": "Open Homepage Open Homepage And Assert Logo",
              "timedOut": null,
              "duration": 1417,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a, _b, _c, _d, _e;\n/**\n * This must always be true, otherwise something is off.\n */\n(0, assertions_1.assert)(context.includedPickles[0].id === pickle.id, \"Included pickle stack is unsynchronized\");\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\ntaskTestCaseStarted(context, {\n    id: testCaseStartedId,\n    testCaseId,\n    attempt: attempt++,\n    timestamp: (0, messages_1.createTimestamp)(),\n});\nwindow.testState = {\n    gherkinDocument,\n    pickles,\n    pickle,\n};\nconst onAfterStep = (options) => {\n    var _a, _b, _c;\n    const { testStepId, start, result } = options;\n    const end = (0, messages_1.createTimestamp)();\n    if (result === \"pending\" || result === \"skipped\") {\n        if (result === \"pending\") {\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.PENDING,\n                    duration: (0, messages_1.duration)(start, end),\n                },\n                timestamp: end,\n            });\n        }\n        else {\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.SKIPPED,\n                    duration: (0, messages_1.duration)(start, end),\n                },\n                timestamp: end,\n            });\n        }\n        remainingSteps.shift();\n        for (const skippedStep of remainingSteps) {\n            const hookIdOrPickleStepId = (0, assertions_1.assertAndReturn)((_b = (_a = skippedStep.hook) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : (_c = skippedStep.pickleStep) === null || _c === void 0 ? void 0 : _c.id, \"Expected a step to either be a hook or a pickleStep\");\n            const testStepId = getTestStepId({\n                context,\n                pickleId: pickle.id,\n                hookIdOrPickleStepId,\n            });\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: (0, messages_1.createTimestamp)(),\n            });\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.SKIPPED,\n                    duration: {\n                        seconds: 0,\n                        nanos: 0,\n                    },\n                },\n                timestamp: (0, messages_1.createTimestamp)(),\n            });\n        }\n        for (let i = 0, count = remainingSteps.length; i < count; i++) {\n            remainingSteps.pop();\n        }\n        cy.then(() => this.skip());\n    }\n    else {\n        taskTestStepFinished(context, {\n            testStepId,\n            testCaseStartedId,\n            testStepResult: {\n                status: messages.TestStepResultStatus.PASSED,\n                duration: (0, messages_1.duration)(start, end),\n            },\n            timestamp: end,\n        });\n        remainingSteps.shift();\n    }\n};\nfor (const step of steps) {\n    if (step.hook) {\n        const hook = step.hook;\n        const testStepId = getTestStepId({\n            context,\n            pickleId: pickle.id,\n            hookIdOrPickleStepId: hook.id,\n        });\n        cy.then(() => {\n            delete window.testState.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            internalProperties.currentStepStartedAt = start;\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: start,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const options = {\n                pickle,\n                gherkinDocument,\n                testCaseStartedId,\n            };\n            return (0, cypress_1.runStepWithLogGroup)({\n                fn: dryRun\n                    ? noopFn\n                    : () => registry.runCaseHook(this, hook, options),\n                keyword: hook.keyword,\n                text: createStepDescription(hook),\n            }).then((result) => {\n                return { start, result };\n            });\n        })\n            .then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n    }\n    else if (step.pickleStep) {\n        const pickleStep = step.pickleStep;\n        const testStepId = getTestStepId({\n            context,\n            pickleId: pickle.id,\n            hookIdOrPickleStepId: pickleStep.id,\n        });\n        const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n        const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a = pickleStep.astNodeIds) === null || _a === void 0 ? void 0 : _a[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n        const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable)\n            ? new data_table_1.default(pickleStep.argument.dataTable)\n            : ((_e = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e === void 0 ? void 0 : _e.content)\n                ? pickleStep.argument.docString.content\n                : undefined;\n        cy.then(() => {\n            window.testState.pickleStep = step.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            internalProperties.currentStep = { pickleStep };\n            internalProperties.currentStepStartedAt = start;\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: start,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const beforeStepHooks = registry.resolveBeforeStepHooks(tags);\n            const afterStepHooks = registry.resolveAfterStepHooks(tags);\n            const options = {\n                pickle,\n                pickleStep,\n                gherkinDocument,\n                testCaseStartedId,\n                testStepId,\n            };\n            const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n                return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                    keyword: \"BeforeStep\",\n                    text: createStepDescription(beforeStepHook),\n                    fn: dryRun\n                        ? noopFn\n                        : () => registry.runStepHook(this, beforeStepHook, options),\n                }));\n            }, cy.wrap({}, { log: false }));\n            return beforeHooksChain.then(() => {\n                try {\n                    return (0, cypress_1.runStepWithLogGroup)({\n                        keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n                        argument,\n                        text,\n                        fn: () => registry.runStepDefininition(this, text, dryRun, argument),\n                    }).then((result) => {\n                        return afterStepHooks\n                            .reduce((chain, afterStepHook) => {\n                            return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                                keyword: \"AfterStep\",\n                                text: createStepDescription(afterStepHook),\n                                fn: dryRun\n                                    ? noopFn\n                                    : () => registry.runStepHook(this, afterStepHook, options),\n                            }));\n                        }, cy.wrap({}, { log: false }))\n                            .then(() => {\n                            return { start, result };\n                        });\n                    });\n                }\n                catch (e) {\n                    if (e instanceof registry_1.MissingDefinitionError) {\n                        throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            });\n        })\n            .then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n    }\n}",
              "err": {},
              "uuid": "ec761090-abd7-4102-b25e-6d13b17f5200",
              "parentUUID": "2c035a96-5cf7-4b5b-b247-a16ebb855a27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Open Homepage And Check Nav Links",
              "fullTitle": "Open Homepage Open Homepage And Check Nav Links",
              "timedOut": null,
              "duration": 2965,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a, _b, _c, _d, _e;\n/**\n * This must always be true, otherwise something is off.\n */\n(0, assertions_1.assert)(context.includedPickles[0].id === pickle.id, \"Included pickle stack is unsynchronized\");\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\ntaskTestCaseStarted(context, {\n    id: testCaseStartedId,\n    testCaseId,\n    attempt: attempt++,\n    timestamp: (0, messages_1.createTimestamp)(),\n});\nwindow.testState = {\n    gherkinDocument,\n    pickles,\n    pickle,\n};\nconst onAfterStep = (options) => {\n    var _a, _b, _c;\n    const { testStepId, start, result } = options;\n    const end = (0, messages_1.createTimestamp)();\n    if (result === \"pending\" || result === \"skipped\") {\n        if (result === \"pending\") {\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.PENDING,\n                    duration: (0, messages_1.duration)(start, end),\n                },\n                timestamp: end,\n            });\n        }\n        else {\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.SKIPPED,\n                    duration: (0, messages_1.duration)(start, end),\n                },\n                timestamp: end,\n            });\n        }\n        remainingSteps.shift();\n        for (const skippedStep of remainingSteps) {\n            const hookIdOrPickleStepId = (0, assertions_1.assertAndReturn)((_b = (_a = skippedStep.hook) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : (_c = skippedStep.pickleStep) === null || _c === void 0 ? void 0 : _c.id, \"Expected a step to either be a hook or a pickleStep\");\n            const testStepId = getTestStepId({\n                context,\n                pickleId: pickle.id,\n                hookIdOrPickleStepId,\n            });\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: (0, messages_1.createTimestamp)(),\n            });\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.SKIPPED,\n                    duration: {\n                        seconds: 0,\n                        nanos: 0,\n                    },\n                },\n                timestamp: (0, messages_1.createTimestamp)(),\n            });\n        }\n        for (let i = 0, count = remainingSteps.length; i < count; i++) {\n            remainingSteps.pop();\n        }\n        cy.then(() => this.skip());\n    }\n    else {\n        taskTestStepFinished(context, {\n            testStepId,\n            testCaseStartedId,\n            testStepResult: {\n                status: messages.TestStepResultStatus.PASSED,\n                duration: (0, messages_1.duration)(start, end),\n            },\n            timestamp: end,\n        });\n        remainingSteps.shift();\n    }\n};\nfor (const step of steps) {\n    if (step.hook) {\n        const hook = step.hook;\n        const testStepId = getTestStepId({\n            context,\n            pickleId: pickle.id,\n            hookIdOrPickleStepId: hook.id,\n        });\n        cy.then(() => {\n            delete window.testState.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            internalProperties.currentStepStartedAt = start;\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: start,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const options = {\n                pickle,\n                gherkinDocument,\n                testCaseStartedId,\n            };\n            return (0, cypress_1.runStepWithLogGroup)({\n                fn: dryRun\n                    ? noopFn\n                    : () => registry.runCaseHook(this, hook, options),\n                keyword: hook.keyword,\n                text: createStepDescription(hook),\n            }).then((result) => {\n                return { start, result };\n            });\n        })\n            .then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n    }\n    else if (step.pickleStep) {\n        const pickleStep = step.pickleStep;\n        const testStepId = getTestStepId({\n            context,\n            pickleId: pickle.id,\n            hookIdOrPickleStepId: pickleStep.id,\n        });\n        const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n        const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a = pickleStep.astNodeIds) === null || _a === void 0 ? void 0 : _a[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n        const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable)\n            ? new data_table_1.default(pickleStep.argument.dataTable)\n            : ((_e = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e === void 0 ? void 0 : _e.content)\n                ? pickleStep.argument.docString.content\n                : undefined;\n        cy.then(() => {\n            window.testState.pickleStep = step.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            internalProperties.currentStep = { pickleStep };\n            internalProperties.currentStepStartedAt = start;\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: start,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const beforeStepHooks = registry.resolveBeforeStepHooks(tags);\n            const afterStepHooks = registry.resolveAfterStepHooks(tags);\n            const options = {\n                pickle,\n                pickleStep,\n                gherkinDocument,\n                testCaseStartedId,\n                testStepId,\n            };\n            const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n                return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                    keyword: \"BeforeStep\",\n                    text: createStepDescription(beforeStepHook),\n                    fn: dryRun\n                        ? noopFn\n                        : () => registry.runStepHook(this, beforeStepHook, options),\n                }));\n            }, cy.wrap({}, { log: false }));\n            return beforeHooksChain.then(() => {\n                try {\n                    return (0, cypress_1.runStepWithLogGroup)({\n                        keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n                        argument,\n                        text,\n                        fn: () => registry.runStepDefininition(this, text, dryRun, argument),\n                    }).then((result) => {\n                        return afterStepHooks\n                            .reduce((chain, afterStepHook) => {\n                            return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                                keyword: \"AfterStep\",\n                                text: createStepDescription(afterStepHook),\n                                fn: dryRun\n                                    ? noopFn\n                                    : () => registry.runStepHook(this, afterStepHook, options),\n                            }));\n                        }, cy.wrap({}, { log: false }))\n                            .then(() => {\n                            return { start, result };\n                        });\n                    });\n                }\n                catch (e) {\n                    if (e instanceof registry_1.MissingDefinitionError) {\n                        throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            });\n        })\n            .then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n    }\n}",
              "err": {},
              "uuid": "fd9e3e67-c556-4ede-a7aa-6e24dc52517b",
              "parentUUID": "2c035a96-5cf7-4b5b-b247-a16ebb855a27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Open Homepage and Switch Language",
              "fullTitle": "Open Homepage Open Homepage and Switch Language",
              "timedOut": null,
              "duration": 2333,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a, _b, _c, _d, _e;\n/**\n * This must always be true, otherwise something is off.\n */\n(0, assertions_1.assert)(context.includedPickles[0].id === pickle.id, \"Included pickle stack is unsynchronized\");\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\ntaskTestCaseStarted(context, {\n    id: testCaseStartedId,\n    testCaseId,\n    attempt: attempt++,\n    timestamp: (0, messages_1.createTimestamp)(),\n});\nwindow.testState = {\n    gherkinDocument,\n    pickles,\n    pickle,\n};\nconst onAfterStep = (options) => {\n    var _a, _b, _c;\n    const { testStepId, start, result } = options;\n    const end = (0, messages_1.createTimestamp)();\n    if (result === \"pending\" || result === \"skipped\") {\n        if (result === \"pending\") {\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.PENDING,\n                    duration: (0, messages_1.duration)(start, end),\n                },\n                timestamp: end,\n            });\n        }\n        else {\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.SKIPPED,\n                    duration: (0, messages_1.duration)(start, end),\n                },\n                timestamp: end,\n            });\n        }\n        remainingSteps.shift();\n        for (const skippedStep of remainingSteps) {\n            const hookIdOrPickleStepId = (0, assertions_1.assertAndReturn)((_b = (_a = skippedStep.hook) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : (_c = skippedStep.pickleStep) === null || _c === void 0 ? void 0 : _c.id, \"Expected a step to either be a hook or a pickleStep\");\n            const testStepId = getTestStepId({\n                context,\n                pickleId: pickle.id,\n                hookIdOrPickleStepId,\n            });\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: (0, messages_1.createTimestamp)(),\n            });\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.SKIPPED,\n                    duration: {\n                        seconds: 0,\n                        nanos: 0,\n                    },\n                },\n                timestamp: (0, messages_1.createTimestamp)(),\n            });\n        }\n        for (let i = 0, count = remainingSteps.length; i < count; i++) {\n            remainingSteps.pop();\n        }\n        cy.then(() => this.skip());\n    }\n    else {\n        taskTestStepFinished(context, {\n            testStepId,\n            testCaseStartedId,\n            testStepResult: {\n                status: messages.TestStepResultStatus.PASSED,\n                duration: (0, messages_1.duration)(start, end),\n            },\n            timestamp: end,\n        });\n        remainingSteps.shift();\n    }\n};\nfor (const step of steps) {\n    if (step.hook) {\n        const hook = step.hook;\n        const testStepId = getTestStepId({\n            context,\n            pickleId: pickle.id,\n            hookIdOrPickleStepId: hook.id,\n        });\n        cy.then(() => {\n            delete window.testState.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            internalProperties.currentStepStartedAt = start;\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: start,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const options = {\n                pickle,\n                gherkinDocument,\n                testCaseStartedId,\n            };\n            return (0, cypress_1.runStepWithLogGroup)({\n                fn: dryRun\n                    ? noopFn\n                    : () => registry.runCaseHook(this, hook, options),\n                keyword: hook.keyword,\n                text: createStepDescription(hook),\n            }).then((result) => {\n                return { start, result };\n            });\n        })\n            .then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n    }\n    else if (step.pickleStep) {\n        const pickleStep = step.pickleStep;\n        const testStepId = getTestStepId({\n            context,\n            pickleId: pickle.id,\n            hookIdOrPickleStepId: pickleStep.id,\n        });\n        const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n        const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a = pickleStep.astNodeIds) === null || _a === void 0 ? void 0 : _a[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n        const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable)\n            ? new data_table_1.default(pickleStep.argument.dataTable)\n            : ((_e = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e === void 0 ? void 0 : _e.content)\n                ? pickleStep.argument.docString.content\n                : undefined;\n        cy.then(() => {\n            window.testState.pickleStep = step.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            internalProperties.currentStep = { pickleStep };\n            internalProperties.currentStepStartedAt = start;\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: start,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const beforeStepHooks = registry.resolveBeforeStepHooks(tags);\n            const afterStepHooks = registry.resolveAfterStepHooks(tags);\n            const options = {\n                pickle,\n                pickleStep,\n                gherkinDocument,\n                testCaseStartedId,\n                testStepId,\n            };\n            const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n                return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                    keyword: \"BeforeStep\",\n                    text: createStepDescription(beforeStepHook),\n                    fn: dryRun\n                        ? noopFn\n                        : () => registry.runStepHook(this, beforeStepHook, options),\n                }));\n            }, cy.wrap({}, { log: false }));\n            return beforeHooksChain.then(() => {\n                try {\n                    return (0, cypress_1.runStepWithLogGroup)({\n                        keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n                        argument,\n                        text,\n                        fn: () => registry.runStepDefininition(this, text, dryRun, argument),\n                    }).then((result) => {\n                        return afterStepHooks\n                            .reduce((chain, afterStepHook) => {\n                            return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                                keyword: \"AfterStep\",\n                                text: createStepDescription(afterStepHook),\n                                fn: dryRun\n                                    ? noopFn\n                                    : () => registry.runStepHook(this, afterStepHook, options),\n                            }));\n                        }, cy.wrap({}, { log: false }))\n                            .then(() => {\n                            return { start, result };\n                        });\n                    });\n                }\n                catch (e) {\n                    if (e instanceof registry_1.MissingDefinitionError) {\n                        throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            });\n        })\n            .then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n    }\n}",
              "err": {},
              "uuid": "0dd032c7-0df6-4f66-9679-8f96fb664924",
              "parentUUID": "2c035a96-5cf7-4b5b-b247-a16ebb855a27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Open Homepage and Check Empty Cart",
              "fullTitle": "Open Homepage Open Homepage and Check Empty Cart",
              "timedOut": null,
              "duration": 2926,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a, _b, _c, _d, _e;\n/**\n * This must always be true, otherwise something is off.\n */\n(0, assertions_1.assert)(context.includedPickles[0].id === pickle.id, \"Included pickle stack is unsynchronized\");\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\ntaskTestCaseStarted(context, {\n    id: testCaseStartedId,\n    testCaseId,\n    attempt: attempt++,\n    timestamp: (0, messages_1.createTimestamp)(),\n});\nwindow.testState = {\n    gherkinDocument,\n    pickles,\n    pickle,\n};\nconst onAfterStep = (options) => {\n    var _a, _b, _c;\n    const { testStepId, start, result } = options;\n    const end = (0, messages_1.createTimestamp)();\n    if (result === \"pending\" || result === \"skipped\") {\n        if (result === \"pending\") {\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.PENDING,\n                    duration: (0, messages_1.duration)(start, end),\n                },\n                timestamp: end,\n            });\n        }\n        else {\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.SKIPPED,\n                    duration: (0, messages_1.duration)(start, end),\n                },\n                timestamp: end,\n            });\n        }\n        remainingSteps.shift();\n        for (const skippedStep of remainingSteps) {\n            const hookIdOrPickleStepId = (0, assertions_1.assertAndReturn)((_b = (_a = skippedStep.hook) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : (_c = skippedStep.pickleStep) === null || _c === void 0 ? void 0 : _c.id, \"Expected a step to either be a hook or a pickleStep\");\n            const testStepId = getTestStepId({\n                context,\n                pickleId: pickle.id,\n                hookIdOrPickleStepId,\n            });\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: (0, messages_1.createTimestamp)(),\n            });\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.SKIPPED,\n                    duration: {\n                        seconds: 0,\n                        nanos: 0,\n                    },\n                },\n                timestamp: (0, messages_1.createTimestamp)(),\n            });\n        }\n        for (let i = 0, count = remainingSteps.length; i < count; i++) {\n            remainingSteps.pop();\n        }\n        cy.then(() => this.skip());\n    }\n    else {\n        taskTestStepFinished(context, {\n            testStepId,\n            testCaseStartedId,\n            testStepResult: {\n                status: messages.TestStepResultStatus.PASSED,\n                duration: (0, messages_1.duration)(start, end),\n            },\n            timestamp: end,\n        });\n        remainingSteps.shift();\n    }\n};\nfor (const step of steps) {\n    if (step.hook) {\n        const hook = step.hook;\n        const testStepId = getTestStepId({\n            context,\n            pickleId: pickle.id,\n            hookIdOrPickleStepId: hook.id,\n        });\n        cy.then(() => {\n            delete window.testState.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            internalProperties.currentStepStartedAt = start;\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: start,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const options = {\n                pickle,\n                gherkinDocument,\n                testCaseStartedId,\n            };\n            return (0, cypress_1.runStepWithLogGroup)({\n                fn: dryRun\n                    ? noopFn\n                    : () => registry.runCaseHook(this, hook, options),\n                keyword: hook.keyword,\n                text: createStepDescription(hook),\n            }).then((result) => {\n                return { start, result };\n            });\n        })\n            .then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n    }\n    else if (step.pickleStep) {\n        const pickleStep = step.pickleStep;\n        const testStepId = getTestStepId({\n            context,\n            pickleId: pickle.id,\n            hookIdOrPickleStepId: pickleStep.id,\n        });\n        const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n        const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a = pickleStep.astNodeIds) === null || _a === void 0 ? void 0 : _a[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n        const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable)\n            ? new data_table_1.default(pickleStep.argument.dataTable)\n            : ((_e = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e === void 0 ? void 0 : _e.content)\n                ? pickleStep.argument.docString.content\n                : undefined;\n        cy.then(() => {\n            window.testState.pickleStep = step.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            internalProperties.currentStep = { pickleStep };\n            internalProperties.currentStepStartedAt = start;\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: start,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const beforeStepHooks = registry.resolveBeforeStepHooks(tags);\n            const afterStepHooks = registry.resolveAfterStepHooks(tags);\n            const options = {\n                pickle,\n                pickleStep,\n                gherkinDocument,\n                testCaseStartedId,\n                testStepId,\n            };\n            const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n                return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                    keyword: \"BeforeStep\",\n                    text: createStepDescription(beforeStepHook),\n                    fn: dryRun\n                        ? noopFn\n                        : () => registry.runStepHook(this, beforeStepHook, options),\n                }));\n            }, cy.wrap({}, { log: false }));\n            return beforeHooksChain.then(() => {\n                try {\n                    return (0, cypress_1.runStepWithLogGroup)({\n                        keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n                        argument,\n                        text,\n                        fn: () => registry.runStepDefininition(this, text, dryRun, argument),\n                    }).then((result) => {\n                        return afterStepHooks\n                            .reduce((chain, afterStepHook) => {\n                            return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                                keyword: \"AfterStep\",\n                                text: createStepDescription(afterStepHook),\n                                fn: dryRun\n                                    ? noopFn\n                                    : () => registry.runStepHook(this, afterStepHook, options),\n                            }));\n                        }, cy.wrap({}, { log: false }))\n                            .then(() => {\n                            return { start, result };\n                        });\n                    });\n                }\n                catch (e) {\n                    if (e instanceof registry_1.MissingDefinitionError) {\n                        throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            });\n        })\n            .then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n    }\n}",
              "err": {},
              "uuid": "15b2af65-cb7d-482e-bdd6-866dcd315e5a",
              "parentUUID": "2c035a96-5cf7-4b5b-b247-a16ebb855a27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Open Homepage and Check Results(Expired)",
              "fullTitle": "Open Homepage Open Homepage and Check Results(Expired)",
              "timedOut": null,
              "duration": 9168,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a, _b, _c, _d, _e;\n/**\n * This must always be true, otherwise something is off.\n */\n(0, assertions_1.assert)(context.includedPickles[0].id === pickle.id, \"Included pickle stack is unsynchronized\");\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\ntaskTestCaseStarted(context, {\n    id: testCaseStartedId,\n    testCaseId,\n    attempt: attempt++,\n    timestamp: (0, messages_1.createTimestamp)(),\n});\nwindow.testState = {\n    gherkinDocument,\n    pickles,\n    pickle,\n};\nconst onAfterStep = (options) => {\n    var _a, _b, _c;\n    const { testStepId, start, result } = options;\n    const end = (0, messages_1.createTimestamp)();\n    if (result === \"pending\" || result === \"skipped\") {\n        if (result === \"pending\") {\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.PENDING,\n                    duration: (0, messages_1.duration)(start, end),\n                },\n                timestamp: end,\n            });\n        }\n        else {\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.SKIPPED,\n                    duration: (0, messages_1.duration)(start, end),\n                },\n                timestamp: end,\n            });\n        }\n        remainingSteps.shift();\n        for (const skippedStep of remainingSteps) {\n            const hookIdOrPickleStepId = (0, assertions_1.assertAndReturn)((_b = (_a = skippedStep.hook) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : (_c = skippedStep.pickleStep) === null || _c === void 0 ? void 0 : _c.id, \"Expected a step to either be a hook or a pickleStep\");\n            const testStepId = getTestStepId({\n                context,\n                pickleId: pickle.id,\n                hookIdOrPickleStepId,\n            });\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: (0, messages_1.createTimestamp)(),\n            });\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.SKIPPED,\n                    duration: {\n                        seconds: 0,\n                        nanos: 0,\n                    },\n                },\n                timestamp: (0, messages_1.createTimestamp)(),\n            });\n        }\n        for (let i = 0, count = remainingSteps.length; i < count; i++) {\n            remainingSteps.pop();\n        }\n        cy.then(() => this.skip());\n    }\n    else {\n        taskTestStepFinished(context, {\n            testStepId,\n            testCaseStartedId,\n            testStepResult: {\n                status: messages.TestStepResultStatus.PASSED,\n                duration: (0, messages_1.duration)(start, end),\n            },\n            timestamp: end,\n        });\n        remainingSteps.shift();\n    }\n};\nfor (const step of steps) {\n    if (step.hook) {\n        const hook = step.hook;\n        const testStepId = getTestStepId({\n            context,\n            pickleId: pickle.id,\n            hookIdOrPickleStepId: hook.id,\n        });\n        cy.then(() => {\n            delete window.testState.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            internalProperties.currentStepStartedAt = start;\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: start,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const options = {\n                pickle,\n                gherkinDocument,\n                testCaseStartedId,\n            };\n            return (0, cypress_1.runStepWithLogGroup)({\n                fn: dryRun\n                    ? noopFn\n                    : () => registry.runCaseHook(this, hook, options),\n                keyword: hook.keyword,\n                text: createStepDescription(hook),\n            }).then((result) => {\n                return { start, result };\n            });\n        })\n            .then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n    }\n    else if (step.pickleStep) {\n        const pickleStep = step.pickleStep;\n        const testStepId = getTestStepId({\n            context,\n            pickleId: pickle.id,\n            hookIdOrPickleStepId: pickleStep.id,\n        });\n        const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n        const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a = pickleStep.astNodeIds) === null || _a === void 0 ? void 0 : _a[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n        const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable)\n            ? new data_table_1.default(pickleStep.argument.dataTable)\n            : ((_e = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e === void 0 ? void 0 : _e.content)\n                ? pickleStep.argument.docString.content\n                : undefined;\n        cy.then(() => {\n            window.testState.pickleStep = step.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            internalProperties.currentStep = { pickleStep };\n            internalProperties.currentStepStartedAt = start;\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: start,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const beforeStepHooks = registry.resolveBeforeStepHooks(tags);\n            const afterStepHooks = registry.resolveAfterStepHooks(tags);\n            const options = {\n                pickle,\n                pickleStep,\n                gherkinDocument,\n                testCaseStartedId,\n                testStepId,\n            };\n            const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n                return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                    keyword: \"BeforeStep\",\n                    text: createStepDescription(beforeStepHook),\n                    fn: dryRun\n                        ? noopFn\n                        : () => registry.runStepHook(this, beforeStepHook, options),\n                }));\n            }, cy.wrap({}, { log: false }));\n            return beforeHooksChain.then(() => {\n                try {\n                    return (0, cypress_1.runStepWithLogGroup)({\n                        keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n                        argument,\n                        text,\n                        fn: () => registry.runStepDefininition(this, text, dryRun, argument),\n                    }).then((result) => {\n                        return afterStepHooks\n                            .reduce((chain, afterStepHook) => {\n                            return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                                keyword: \"AfterStep\",\n                                text: createStepDescription(afterStepHook),\n                                fn: dryRun\n                                    ? noopFn\n                                    : () => registry.runStepHook(this, afterStepHook, options),\n                            }));\n                        }, cy.wrap({}, { log: false }))\n                            .then(() => {\n                            return { start, result };\n                        });\n                    });\n                }\n                catch (e) {\n                    if (e instanceof registry_1.MissingDefinitionError) {\n                        throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            });\n        })\n            .then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n    }\n}",
              "err": {},
              "uuid": "7bb38284-0968-436f-8029-591d9c8e6801",
              "parentUUID": "2c035a96-5cf7-4b5b-b247-a16ebb855a27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Open Homepage and Check Results(Actual)",
              "fullTitle": "Open Homepage Open Homepage and Check Results(Actual)",
              "timedOut": null,
              "duration": 5488,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a, _b, _c, _d, _e;\n/**\n * This must always be true, otherwise something is off.\n */\n(0, assertions_1.assert)(context.includedPickles[0].id === pickle.id, \"Included pickle stack is unsynchronized\");\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\ntaskTestCaseStarted(context, {\n    id: testCaseStartedId,\n    testCaseId,\n    attempt: attempt++,\n    timestamp: (0, messages_1.createTimestamp)(),\n});\nwindow.testState = {\n    gherkinDocument,\n    pickles,\n    pickle,\n};\nconst onAfterStep = (options) => {\n    var _a, _b, _c;\n    const { testStepId, start, result } = options;\n    const end = (0, messages_1.createTimestamp)();\n    if (result === \"pending\" || result === \"skipped\") {\n        if (result === \"pending\") {\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.PENDING,\n                    duration: (0, messages_1.duration)(start, end),\n                },\n                timestamp: end,\n            });\n        }\n        else {\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.SKIPPED,\n                    duration: (0, messages_1.duration)(start, end),\n                },\n                timestamp: end,\n            });\n        }\n        remainingSteps.shift();\n        for (const skippedStep of remainingSteps) {\n            const hookIdOrPickleStepId = (0, assertions_1.assertAndReturn)((_b = (_a = skippedStep.hook) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : (_c = skippedStep.pickleStep) === null || _c === void 0 ? void 0 : _c.id, \"Expected a step to either be a hook or a pickleStep\");\n            const testStepId = getTestStepId({\n                context,\n                pickleId: pickle.id,\n                hookIdOrPickleStepId,\n            });\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: (0, messages_1.createTimestamp)(),\n            });\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.SKIPPED,\n                    duration: {\n                        seconds: 0,\n                        nanos: 0,\n                    },\n                },\n                timestamp: (0, messages_1.createTimestamp)(),\n            });\n        }\n        for (let i = 0, count = remainingSteps.length; i < count; i++) {\n            remainingSteps.pop();\n        }\n        cy.then(() => this.skip());\n    }\n    else {\n        taskTestStepFinished(context, {\n            testStepId,\n            testCaseStartedId,\n            testStepResult: {\n                status: messages.TestStepResultStatus.PASSED,\n                duration: (0, messages_1.duration)(start, end),\n            },\n            timestamp: end,\n        });\n        remainingSteps.shift();\n    }\n};\nfor (const step of steps) {\n    if (step.hook) {\n        const hook = step.hook;\n        const testStepId = getTestStepId({\n            context,\n            pickleId: pickle.id,\n            hookIdOrPickleStepId: hook.id,\n        });\n        cy.then(() => {\n            delete window.testState.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            internalProperties.currentStepStartedAt = start;\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: start,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const options = {\n                pickle,\n                gherkinDocument,\n                testCaseStartedId,\n            };\n            return (0, cypress_1.runStepWithLogGroup)({\n                fn: dryRun\n                    ? noopFn\n                    : () => registry.runCaseHook(this, hook, options),\n                keyword: hook.keyword,\n                text: createStepDescription(hook),\n            }).then((result) => {\n                return { start, result };\n            });\n        })\n            .then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n    }\n    else if (step.pickleStep) {\n        const pickleStep = step.pickleStep;\n        const testStepId = getTestStepId({\n            context,\n            pickleId: pickle.id,\n            hookIdOrPickleStepId: pickleStep.id,\n        });\n        const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n        const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a = pickleStep.astNodeIds) === null || _a === void 0 ? void 0 : _a[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n        const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable)\n            ? new data_table_1.default(pickleStep.argument.dataTable)\n            : ((_e = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e === void 0 ? void 0 : _e.content)\n                ? pickleStep.argument.docString.content\n                : undefined;\n        cy.then(() => {\n            window.testState.pickleStep = step.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            internalProperties.currentStep = { pickleStep };\n            internalProperties.currentStepStartedAt = start;\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: start,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const beforeStepHooks = registry.resolveBeforeStepHooks(tags);\n            const afterStepHooks = registry.resolveAfterStepHooks(tags);\n            const options = {\n                pickle,\n                pickleStep,\n                gherkinDocument,\n                testCaseStartedId,\n                testStepId,\n            };\n            const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n                return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                    keyword: \"BeforeStep\",\n                    text: createStepDescription(beforeStepHook),\n                    fn: dryRun\n                        ? noopFn\n                        : () => registry.runStepHook(this, beforeStepHook, options),\n                }));\n            }, cy.wrap({}, { log: false }));\n            return beforeHooksChain.then(() => {\n                try {\n                    return (0, cypress_1.runStepWithLogGroup)({\n                        keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n                        argument,\n                        text,\n                        fn: () => registry.runStepDefininition(this, text, dryRun, argument),\n                    }).then((result) => {\n                        return afterStepHooks\n                            .reduce((chain, afterStepHook) => {\n                            return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                                keyword: \"AfterStep\",\n                                text: createStepDescription(afterStepHook),\n                                fn: dryRun\n                                    ? noopFn\n                                    : () => registry.runStepHook(this, afterStepHook, options),\n                            }));\n                        }, cy.wrap({}, { log: false }))\n                            .then(() => {\n                            return { start, result };\n                        });\n                    });\n                }\n                catch (e) {\n                    if (e instanceof registry_1.MissingDefinitionError) {\n                        throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            });\n        })\n            .then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n    }\n}",
              "err": {},
              "uuid": "8da0dc9c-80c0-48e3-bcad-462d6d0104a9",
              "parentUUID": "2c035a96-5cf7-4b5b-b247-a16ebb855a27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Open Homepage and Check Patient Phone Login",
              "fullTitle": "Open Homepage Open Homepage and Check Patient Phone Login",
              "timedOut": null,
              "duration": 2657,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a, _b, _c, _d, _e;\n/**\n * This must always be true, otherwise something is off.\n */\n(0, assertions_1.assert)(context.includedPickles[0].id === pickle.id, \"Included pickle stack is unsynchronized\");\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\ntaskTestCaseStarted(context, {\n    id: testCaseStartedId,\n    testCaseId,\n    attempt: attempt++,\n    timestamp: (0, messages_1.createTimestamp)(),\n});\nwindow.testState = {\n    gherkinDocument,\n    pickles,\n    pickle,\n};\nconst onAfterStep = (options) => {\n    var _a, _b, _c;\n    const { testStepId, start, result } = options;\n    const end = (0, messages_1.createTimestamp)();\n    if (result === \"pending\" || result === \"skipped\") {\n        if (result === \"pending\") {\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.PENDING,\n                    duration: (0, messages_1.duration)(start, end),\n                },\n                timestamp: end,\n            });\n        }\n        else {\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.SKIPPED,\n                    duration: (0, messages_1.duration)(start, end),\n                },\n                timestamp: end,\n            });\n        }\n        remainingSteps.shift();\n        for (const skippedStep of remainingSteps) {\n            const hookIdOrPickleStepId = (0, assertions_1.assertAndReturn)((_b = (_a = skippedStep.hook) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : (_c = skippedStep.pickleStep) === null || _c === void 0 ? void 0 : _c.id, \"Expected a step to either be a hook or a pickleStep\");\n            const testStepId = getTestStepId({\n                context,\n                pickleId: pickle.id,\n                hookIdOrPickleStepId,\n            });\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: (0, messages_1.createTimestamp)(),\n            });\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.SKIPPED,\n                    duration: {\n                        seconds: 0,\n                        nanos: 0,\n                    },\n                },\n                timestamp: (0, messages_1.createTimestamp)(),\n            });\n        }\n        for (let i = 0, count = remainingSteps.length; i < count; i++) {\n            remainingSteps.pop();\n        }\n        cy.then(() => this.skip());\n    }\n    else {\n        taskTestStepFinished(context, {\n            testStepId,\n            testCaseStartedId,\n            testStepResult: {\n                status: messages.TestStepResultStatus.PASSED,\n                duration: (0, messages_1.duration)(start, end),\n            },\n            timestamp: end,\n        });\n        remainingSteps.shift();\n    }\n};\nfor (const step of steps) {\n    if (step.hook) {\n        const hook = step.hook;\n        const testStepId = getTestStepId({\n            context,\n            pickleId: pickle.id,\n            hookIdOrPickleStepId: hook.id,\n        });\n        cy.then(() => {\n            delete window.testState.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            internalProperties.currentStepStartedAt = start;\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: start,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const options = {\n                pickle,\n                gherkinDocument,\n                testCaseStartedId,\n            };\n            return (0, cypress_1.runStepWithLogGroup)({\n                fn: dryRun\n                    ? noopFn\n                    : () => registry.runCaseHook(this, hook, options),\n                keyword: hook.keyword,\n                text: createStepDescription(hook),\n            }).then((result) => {\n                return { start, result };\n            });\n        })\n            .then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n    }\n    else if (step.pickleStep) {\n        const pickleStep = step.pickleStep;\n        const testStepId = getTestStepId({\n            context,\n            pickleId: pickle.id,\n            hookIdOrPickleStepId: pickleStep.id,\n        });\n        const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n        const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a = pickleStep.astNodeIds) === null || _a === void 0 ? void 0 : _a[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n        const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable)\n            ? new data_table_1.default(pickleStep.argument.dataTable)\n            : ((_e = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e === void 0 ? void 0 : _e.content)\n                ? pickleStep.argument.docString.content\n                : undefined;\n        cy.then(() => {\n            window.testState.pickleStep = step.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            internalProperties.currentStep = { pickleStep };\n            internalProperties.currentStepStartedAt = start;\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: start,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const beforeStepHooks = registry.resolveBeforeStepHooks(tags);\n            const afterStepHooks = registry.resolveAfterStepHooks(tags);\n            const options = {\n                pickle,\n                pickleStep,\n                gherkinDocument,\n                testCaseStartedId,\n                testStepId,\n            };\n            const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n                return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                    keyword: \"BeforeStep\",\n                    text: createStepDescription(beforeStepHook),\n                    fn: dryRun\n                        ? noopFn\n                        : () => registry.runStepHook(this, beforeStepHook, options),\n                }));\n            }, cy.wrap({}, { log: false }));\n            return beforeHooksChain.then(() => {\n                try {\n                    return (0, cypress_1.runStepWithLogGroup)({\n                        keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n                        argument,\n                        text,\n                        fn: () => registry.runStepDefininition(this, text, dryRun, argument),\n                    }).then((result) => {\n                        return afterStepHooks\n                            .reduce((chain, afterStepHook) => {\n                            return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                                keyword: \"AfterStep\",\n                                text: createStepDescription(afterStepHook),\n                                fn: dryRun\n                                    ? noopFn\n                                    : () => registry.runStepHook(this, afterStepHook, options),\n                            }));\n                        }, cy.wrap({}, { log: false }))\n                            .then(() => {\n                            return { start, result };\n                        });\n                    });\n                }\n                catch (e) {\n                    if (e instanceof registry_1.MissingDefinitionError) {\n                        throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            });\n        })\n            .then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n    }\n}",
              "err": {},
              "uuid": "b9a88036-6634-4bac-bfde-27bc90a30a25",
              "parentUUID": "2c035a96-5cf7-4b5b-b247-a16ebb855a27",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "407b3602-9e67-4697-b750-9c8d622cc307",
            "ec761090-abd7-4102-b25e-6d13b17f5200",
            "fd9e3e67-c556-4ede-a7aa-6e24dc52517b",
            "0dd032c7-0df6-4f66-9679-8f96fb664924",
            "15b2af65-cb7d-482e-bdd6-866dcd315e5a",
            "7bb38284-0968-436f-8029-591d9c8e6801",
            "8da0dc9c-80c0-48e3-bcad-462d6d0104a9",
            "b9a88036-6634-4bac-bfde-27bc90a30a25"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 29468,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress\\reports\\html\\.jsons"
      },
      "version": "6.2.0"
    }
  }
}